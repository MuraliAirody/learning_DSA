
################################## BruteForce Approach #################################

import java.util.*;

class Main {
      public static int[][] rotate(int [][]mat){
          int n = mat.length;
          int[][] newMat = new int[n][n];
          
          // pickup the rows from the last of the matrix and put it from the start as a column of a new matrix
          // (Alternate option pickup rows from first of the matrix and put it from at the end as a column of a new matrix)

          for(int i=n-1;i>=0;i--){
              for(int j=0;j<n;j++){
                  newMat[j][n-i-1] = mat[i][j];  
              }
          }

        return newMat;
  }
  public static void main(String args[]) {
      int arr[][] =  {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
      int rotated[][] = rotate(arr);
      System.out.println("Rotated Image");
      for (int i = 0; i < rotated.length; i++) {
          for (int j = 0; j < rotated.length; j++) {
              System.out.print(rotated[i][j] + " ");
          }
          System.out.println();
      }

  }
}

Time Complexity: O(N*N) iterate over the Matrix

Space Complexity: O(N*N) created one more matrix to return

################################## Optimal Approach ##################################

class Main {
      public static int[][] rotate(int [][]mat){
         int n = mat.length;
        
        // transposing Matrix

          for(int i=0;i<n;i++){
              for(int j=0;j<=i;j++){
                  int temp = 0;
                  temp = mat[j][i];
                  mat[j][i] = mat[i][j];
                  mat[i][j] = temp;
              }
          }

        //reversing the each columns

          for(int i=0;i<n;i++){
              for(int j=0;j<n/2;j++){
                  int temp = 0;
                  temp = mat[i][n-j-1];
                  mat[i][n-j-1] = mat[i][j];
                  mat[i][j] = temp;
              }
          }
        return mat;
  }
  public static void main(String args[]) {
      int arr[][] =  {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
      int rotated[][] = rotate(arr);
      System.out.println("Rotated Image");
      for (int i = 0; i < rotated.length; i++) {
          for (int j = 0; j < rotated.length; j++) {
              System.out.print(rotated[i][j] + " ");
          }
          System.out.println();
      }

  }
}

Time Complexity: O((N*N)+(N*N)), N*N for transposing matrix, N*N for reversing the columns

Space Complexity: O(1) there is no extra space is used 